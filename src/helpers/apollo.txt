/**
 * handles persistent caching for offline use
 *
 * await before instantiating ApolloClient,
 * else queries might run before the cache is persisted
 *
 * @see https://github.com/tc39/proposal-top-level-await
 * @see https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221
 */
try {
  const initPersistCache: () => Promise<void> = async (): Promise<void> =>
    persistCache({
      cache,
      storage: window.localStorage
    });
  initPersistCache();
} catch (e) {
  // probably no local storage support
  // nothing to do really, we just won't have offline support
  // we could try failover to another storage
  // but if local storage is not supported, PWA in general won't either
}
























import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';
import { persistCache } from 'apollo-cache-persist';
// tslint:disable-next-line:no-submodule-imports
import { PersistentStorage } from 'apollo-cache-persist/types';
import { ApolloClient as Client } from 'apollo-client';
import { ApolloLink, GraphQLRequest, Operation } from 'apollo-link';
import { setContext } from 'apollo-link-context';
import { createHttpLink } from 'apollo-link-http';
import { RetryLink } from 'apollo-link-retry';
import * as localforage from 'localforage';

interface IContext {
  headers: {
    authorization: string;
  };
}

const cache: InMemoryCache = new InMemoryCache();
const store: LocalForage = localforage.createInstance({
  name: 'apollo-cache',
  version: 1
});

// TODO: add test
/**
 * instantiates the cache persistor
 *
 * @see https://github.com/apollographql/apollo-cache-persist#using-cachepersistor
 */
persistCache({
  cache,
  storage: <PersistentStorage<NormalizedCacheObject>>store
}).then(() => {
  console.log('cache loaded');
});

/**
 * handles authorization / headers
 */
const authLink: ApolloLink = setContext(
  (operation: GraphQLRequest, prevContext: IContext): IContext => ({
    headers: {
      ...prevContext.headers,
      authorization: `Bearer ${process.env.TAKESHAPE_API_KEY}`
    }
  })
);

/**
 * handles https requests
 */
const httpLink: ApolloLink = createHttpLink({
  uri: process.env.TAKESHAPE_API_URL
});

// TODO: consider replacing or using additional to this the "apollo-link-error"
//    for controlled retry by the user after the automatic failures
//    or for controlled retry of faster retries (instead of forced delay)
// TODO: add test for the retry in its final form
const retryLink: RetryLink = new RetryLink({
  attempts: { max: Infinity }
});
// .split(
//   // split based on operation type
//   (op: Operation): boolean => {
//     // const { kind, operation } = query as any;
//     op.operationName
//     // return kind === 'OperationDefinition' && operation === 'subscription';
//     return true;
//   },
//   httpLink
// );

const ApolloClient: Client<{}> = new Client({
  link: ApolloLink.from([authLink, retryLink, httpLink]),
  cache,
  defaultOptions: {
    query: {
      fetchPolicy: 'cache-first',
      errorPolicy: 'none'
    },
    watchQuery: {
      fetchPolicy: 'cache-and-network',
      errorPolicy: 'none'
    }
  }
});

export { ApolloClient };





















import { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';
import { CachePersistor } from 'apollo-cache-persist';
import { ApolloClient as Client } from 'apollo-client';
import { ApolloLink, GraphQLRequest } from 'apollo-link';
import { setContext } from 'apollo-link-context';
import { createHttpLink } from 'apollo-link-http';
import { RetryLink } from 'apollo-link-retry';

interface IContext {
  headers: {
    authorization: string;
  };
}

const cache: InMemoryCache = new InMemoryCache();

// TODO: add test
/**
 * handles persistent caching for offline use
 *
 * await before instantiating ApolloClient,
 * else queries might run before the cache is persisted
 *
 * @see https://github.com/tc39/proposal-top-level-await
 * @see https://gist.github.com/Rich-Harris/0b6f317657f5167663b493c722647221
 */
const cachePersistor: CachePersistor<NormalizedCacheObject> = new CachePersistor({
  cache,
  storage: window.localStorage
});

/**
 * handles authorization / headers
 */
const authLink: ApolloLink = setContext(
  (operation: GraphQLRequest, prevContext: IContext): IContext => ({
    headers: {
      ...prevContext.headers,
      authorization: `Bearer ${process.env.TAKESHAPE_API_KEY}`
    }
  })
);

/**
 * handles https requests
 */
const httpLink: ApolloLink = createHttpLink({
  uri: process.env.TAKESHAPE_API_URL
});

// TODO: consider replacing or using additional to this the "apollo-link-error"
//    for controlled retry by the user after the automatic failures
//    or for controlled retry of faster retries (instead of forced delay)
// TODO: add test for the retry in its final form
// const retryLink: RetryLink = new RetryLink();

const ApolloClient: Client<{}> = new Client({
  link: ApolloLink.from([authLink, httpLink]),
  cache
});

export { ApolloClient };
