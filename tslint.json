{
  "defaultSeverity": "error",
  "extends": [
    "tslint:recommended",
    "tslint-react",
    "tslint-consistent-codestyle",
    "tslint-microsoft-contrib"
  ],
  "rulesDirectory": ["node_modules/tslint-microsoft-contrib"],
  "rules": {
    // we need to ignore function names that begin with "describe"
    // because they are needed for dynamic jest tests
    "mocha-no-side-effect-code": [true, { "ignore": "^describe.+" }],
    // it produces too many false positives
    // @see https://github.com/palantir/tslint/issues/2430
    "no-unnecessary-callback-wrapper": false,
    // can not keep enabled because we need to allow return of null in react
    "no-null-keyword": false,
    // warn but do not fail the build for TODO (until we stabilize the app)
    "no-suspicious-comment": {
      "severity": "warning"
    },
    // we will instead, use prettier for that style rule
    "align": [false],
    "max-file-line-count": [true, 250],
    "quotemark": [true, "single", "jsx-double"],
    // @see https://github.com/prettier/prettier/issues/1565
    "newline-per-chained-call": false,
    // @see https://github.com/Microsoft/tslint-microsoft-contrib#readme
    // @see https://github.com/Microsoft/tslint-microsoft-contrib/issues/435
    "no-relative-imports": [true, "allow-siblings"],
    // @see https://github.com/palantir/tslint-react/issues/120
    "variable-name": [
      true,
      "ban-keywords",
      "check-format",
      "allow-pascal-case"
    ],
    // @see https://github.com/palantir/tslint/issues/3364
    "no-implicit-dependencies": [
      true,
      "dev",
      ["src", "assets", "ReactHotLoader"]
    ],
    "no-submodule-imports": [
      true,
      "src",
      "assets",
      "@material-ui/core",
      "apollo-cache-persist/types"
    ],
    // @see https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/naming-convention.md
    "naming-convention": [
      true,
      // type alias names must start with "T"
      // enforce PascalCase for classes, interfaces, enums, etc. Remember, there are still no underscores allowed
      { "type": "type", "format": "PascalCase", "prefix": "T" },
      // do not require class names to have prefix
      { "type": "class", "prefix": null },
      // inferface names must start with "I"
      { "type": "interface", "format": "PascalCase", "prefix": "I" },
      // enum names must start with "E"
      { "type": "enum", "format": "PascalCase", "prefix": "E" },
      // exclude the Window interface name to have to start with "I"
      {
        "type": "interface",
        "filter": "^Window$",
        "prefix": null
      },
      // exclude the Global interface name to have to start with "I"
      {
        "type": "interface",
        "filter": "^Global$",
        "prefix": null
      }
    ],
    // since we already have the "naming-convention" rule that
    // lints interface names, where we also define exclusions,
    // there is no need for redundancy. hence, disabling this rule
    "interface-name": [false]
  }
}
